// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __lamW_RcppExports_h__
#define __lamW_RcppExports_h__

#include <Rcpp.h>

namespace lamW {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("lamW", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("lamW", "lamW_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in lamW");
            }
        }
    }

    inline NumericVector lambertW0_C(NumericVector x) {
        typedef SEXP(*Ptr_lambertW0_C)(SEXP);
        static Ptr_lambertW0_C p_lambertW0_C = NULL;
        if (p_lambertW0_C == NULL) {
            validateSignature("NumericVector(*lambertW0_C)(NumericVector)");
            p_lambertW0_C = (Ptr_lambertW0_C)R_GetCCallable("lamW", "lamW_lambertW0_C");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_lambertW0_C(Rcpp::wrap(x));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

    inline NumericVector lambertWm1_C(NumericVector x) {
        typedef SEXP(*Ptr_lambertWm1_C)(SEXP);
        static Ptr_lambertWm1_C p_lambertWm1_C = NULL;
        if (p_lambertWm1_C == NULL) {
            validateSignature("NumericVector(*lambertWm1_C)(NumericVector)");
            p_lambertWm1_C = (Ptr_lambertWm1_C)R_GetCCallable("lamW", "lamW_lambertWm1_C");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_lambertWm1_C(Rcpp::wrap(x));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

}

#endif // __lamW_RcppExports_h__
